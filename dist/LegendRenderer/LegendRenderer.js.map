{"version":3,"file":"LegendRenderer.js","sourceRoot":"","sources":["../../src/LegendRenderer/LegendRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { boundingExtent } from 'ol/extent';\r\nimport OlGeometry from 'ol/geom/Geometry';\r\nimport OlGeomPoint from 'ol/geom/Point';\r\nimport OlGeomPolygon from 'ol/geom/Polygon';\r\nimport OlGeomLineString from 'ol/geom/LineString';\r\nimport Renderer from 'ol/render/canvas/Immediate';\r\nimport {\r\n  isRule,\r\n  isSymbolizer\r\n} from 'geostyler-style';\r\nimport { create as createTransform } from 'ol/transform';\r\nimport {\r\n  Style,\r\n  Symbolizer,\r\n  Rule\r\n} from 'geostyler-style/dist/style';\r\nimport OlStyleParser, { OlParserStyleFct } from 'geostyler-openlayers-parser/dist/OlStyleParser';\r\nimport OlFeature from 'ol/Feature';\r\nimport SvgOutput from './SvgOutput';\r\nimport AbstractOutput from './AbstractOutput';\r\nimport PngOutput from './PngOutput';\r\n\r\ninterface LegendItemConfiguration {\r\n  rule?: Rule;\r\n  title: string;\r\n}\r\n\r\ninterface LegendConfiguration {\r\n  items: LegendItemConfiguration[];\r\n  title: string;\r\n}\r\n\r\ninterface RemoteLegend {\r\n  url: string;\r\n  title: string;\r\n}\r\n\r\ninterface LegendsConfiguration {\r\n  styles?: Style[];\r\n  configs?: LegendItemConfiguration[];\r\n  remoteLegends?: RemoteLegend[];\r\n  size: [number, number];\r\n  maxColumnHeight?: number;\r\n  maxColumnWidth?: number;\r\n  overflow?: 'auto' | 'group';\r\n  hideRect?: boolean;\r\n}\r\n\r\nconst iconSize: [number, number] = [45, 30];\r\n\r\n/**\r\n * A class that can be used to render legends as images.\r\n */\r\nexport class LegendRenderer {\r\n\r\n  config: LegendsConfiguration | null = null;\r\n\r\n  /**\r\n   * Constructs a new legend renderer.\r\n   * @param {LegendsConfiguration} config the legend configuration\r\n   */\r\n  constructor(config: LegendsConfiguration) {\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Constructs a legend configuration from a geostyler style object.\r\n   * @param {Style} style a geostyler style\r\n   */\r\n  extractConfigFromStyle(style: Style) {\r\n    const config: LegendConfiguration = {\r\n      items: [],\r\n      title: ''\r\n    };\r\n    if (style.name) {\r\n      config.title = style.name;\r\n    }\r\n    style.rules.forEach(rule => {\r\n      config.items.push({\r\n        title: rule.name,\r\n        rule\r\n      });\r\n    });\r\n    return config;\r\n  }\r\n\r\n  /**\r\n   * Renders a single legend item.\r\n   * @param {AbstractOutput} output\r\n   * @param {LegendItemConfiguration} item configuration of the legend item\r\n   * @param {[number, number]} position the current position\r\n   */\r\n  renderLegendItem(\r\n    output: AbstractOutput,\r\n    item: LegendItemConfiguration,\r\n    position: [number, number]\r\n  ) {\r\n    if (!this.config) {\r\n      return;\r\n    }\r\n\r\n    const {\r\n      hideRect,\r\n      maxColumnHeight,\r\n      maxColumnWidth\r\n    } = this.config;\r\n\r\n    if (item.rule) {\r\n      output.useContainer(item.title);\r\n      return this.getRuleIcon(item.rule)\r\n        .then(async (uri) => {\r\n          await output.addImage(uri, ...iconSize, position[0] + 1, position[1], !hideRect);\r\n          output.addLabel(item.title, position[0] + iconSize[0] + 5, position[1] + 20);\r\n          position[1] += iconSize[1] + 5;\r\n          if (maxColumnHeight && position[1] + iconSize[1] + 5 >= maxColumnHeight) {\r\n            position[1] = 5;\r\n            position[0] += maxColumnWidth || 0;\r\n          }\r\n        })\r\n        .catch(() => {\r\n          return undefined;\r\n        });\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Constructs a geometry for rendering a specific symbolizer.\r\n   * @param {Symbolizer} symbolizer the symbolizer object\r\n   */\r\n  getGeometryForSymbolizer(symbolizer: Symbolizer): OlGeometry {\r\n    if (!isSymbolizer(symbolizer)) {\r\n      throw new Error('Invalid symbolizer');\r\n    }\r\n\r\n    const kind = symbolizer.kind;\r\n    switch (kind) {\r\n      case 'Mark':\r\n      case 'Icon':\r\n      case 'Text':\r\n        return new OlGeomPoint([iconSize[0] / 2, iconSize[1] / 2]);\r\n      case 'Fill':\r\n        return new OlGeomPolygon([[\r\n          [3, 3], [iconSize[0] - 3, 3], [iconSize[0] - 3, iconSize[1] - 3],\r\n          [3, iconSize[1] - 3], [3, 3]\r\n        ]]);\r\n      case 'Line':\r\n        return new OlGeomLineString([\r\n          [iconSize[0] / 6, iconSize[1] / 6],\r\n          [iconSize[0] / 3, iconSize[1] / 3 * 2],\r\n          [iconSize[0] / 2, iconSize[1] / 3],\r\n          [iconSize[0] / 6 * 5, iconSize[1] / 6 * 5]\r\n        ]);\r\n      default:\r\n        return new OlGeomPoint([iconSize[0] / 2, iconSize[1] / 2]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a promise resolving to a data uri with the appropriate rule icon.\r\n   * @param {Object} rule the geostyler rule\r\n   */\r\n  getRuleIcon(rule: Rule): Promise<string> {\r\n    if (!isRule(rule)) {\r\n      return Promise.reject('Invalid rule');\r\n    }\r\n\r\n    const canvas = document.createElement('canvas');\r\n    canvas.setAttribute('width', `${iconSize[0]}`);\r\n    canvas.setAttribute('height', `${iconSize[1]}`);\r\n    const extent = boundingExtent([[0, 0], [iconSize[0], iconSize[1]]]);\r\n    const pixelRatio = 1;\r\n    const context = canvas.getContext('2d');\r\n    const transform = createTransform();\r\n    const renderer = new Renderer(context as CanvasRenderingContext2D, pixelRatio, extent, transform, 0);\r\n    const geoms: OlGeometry[] = [];\r\n\r\n    rule.symbolizers.forEach(symbolizer => geoms.push(this.getGeometryForSymbolizer(symbolizer)));\r\n\r\n    const styleParser = new OlStyleParser();\r\n\r\n    const style = {\r\n      name: '',\r\n      rules: [{\r\n        name: '',\r\n        symbolizers: rule.symbolizers\r\n      }]\r\n    };\r\n    return new Promise(async (resolve, reject) => {\r\n      function drawGeoms(){\r\n        geoms.forEach((geom: OlGeometry) => renderer.drawGeometry(geom));\r\n      }\r\n      try {\r\n        let { output: olStyle, errors = [] } = await styleParser.writeStyle(style);\r\n        if (errors.length > 0) {\r\n          reject(errors[0]);\r\n        }\r\n        if (typeof olStyle == 'function') {\r\n          olStyle = <OlParserStyleFct>olStyle(new OlFeature(geoms[0]), 1);\r\n        }\r\n        if (Array.isArray(olStyle)) {\r\n          olStyle.forEach((styleItem) => {\r\n            renderer.setStyle(styleItem);\r\n            drawGeoms();\r\n          });\r\n        } else {\r\n          // @ts-expect-error TODO fix type errors\r\n          renderer.setStyle(olStyle);\r\n          drawGeoms();\r\n        }\r\n        resolve(canvas.toDataURL('image/png'));\r\n      } catch (error) {\r\n        reject();\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Render a single legend.\r\n   * @param {LegendConfiguration} config the legend config\r\n   * @param {AbstractOutput} output\r\n   * @param {[number, number]} position the current position\r\n   */\r\n  renderLegend(\r\n    config: LegendConfiguration,\r\n    output: AbstractOutput,\r\n    position: [number, number]\r\n  ) {\r\n    if (!this.config) {\r\n      return;\r\n    }\r\n    output.useRoot();\r\n    if (this.config.overflow !== 'auto' && position[0] !== 0) {\r\n      const legendHeight = config.items.length * (iconSize[1] + 5) + 20;\r\n      // @ts-expect-error TODO fix type errors\r\n      if (legendHeight + position[1] > this.config.maxColumnHeight) {\r\n      // @ts-expect-error TODO fix type errors\r\n        position[0] += this.config.maxColumnWidth;\r\n        position[1] = 0;\r\n      }\r\n    }\r\n    if (config.title) {\r\n      output.addTitle(config.title, position[0], position[1] === 0 ? '1em': position[1] + 15);\r\n      position[1] += 20;\r\n    }\r\n\r\n    return config.items.reduce((cur, item) => {\r\n      return cur.then(() => this.renderLegendItem(output, item, position));\r\n    }, Promise.resolve());\r\n  }\r\n\r\n  /**\r\n   * Render all images given by URL and append them to the legend\r\n   * @param {RemoteLegend[]} remoteLegends the array of remote legend objects\r\n   * @param {AbstractOutput} output\r\n   * @param {[number, number]} position the current position\r\n   */\r\n  async renderImages(\r\n    remoteLegends: RemoteLegend[],\r\n    output: AbstractOutput,\r\n    position: [number, number]\r\n  ) {\r\n    const legendSpacing = 20;\r\n    const titleSpacing = 5;\r\n    for (let i = 0; i < remoteLegends.length; i++) {\r\n      const legendUrl = remoteLegends[i].url;\r\n      const legendTitle = remoteLegends[i].title;\r\n      try {\r\n        const response = await fetch(legendUrl);\r\n        const blob = await response.blob();\r\n        const readBlob = async (imageBlob: Blob): Promise<string | ArrayBuffer> => {\r\n          return new Promise((resolve, reject) => {\r\n            try {\r\n              const fileReader = new FileReader();\r\n              fileReader.onload = async (e) => {\r\n                // @ts-expect-error TODO fix type errors\r\n                const result = e.target.result;\r\n                // @ts-expect-error TODO fix type errors\r\n                resolve(result) ;\r\n              };\r\n              fileReader.readAsDataURL(imageBlob) ;\r\n            } catch (e) {\r\n              reject(e);\r\n            }\r\n          });\r\n        };\r\n        const base64 = await readBlob(blob);\r\n\r\n        let img: HTMLImageElement = new Image();\r\n        img.src = base64.toString();\r\n        await img.decode();\r\n\r\n        // @ts-expect-error TODO fix type errors\r\n        if (this.config.overflow === 'auto' &&\r\n            img.height + legendSpacing + titleSpacing +\r\n            // @ts-expect-error TODO fix type errors\r\n            position[1] > this.config.maxColumnHeight) {\r\n          // @ts-expect-error TODO fix type errors\r\n          position[0] += this.config.maxColumnWidth;\r\n          position[1] = 0;\r\n        }\r\n        if (legendTitle) {\r\n          output.useRoot();\r\n          position[1] += legendSpacing;\r\n          output.addTitle(legendTitle, ...position);\r\n          position[1] += titleSpacing;\r\n        }\r\n        await output.addImage(base64.toString(), img.width, img.height,...position, false);\r\n\r\n        position[1] += img.height;\r\n      } catch (err) {\r\n        // eslint-disable-next-line no-console\r\n        console.error('Error on fetching legend: ', err);\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n\r\n  async renderAsImage(format?: 'svg' | 'png', target?: HTMLElement): Promise<Element> {\r\n    if (!this.config) {\r\n      return Promise.reject();\r\n    }\r\n    const {\r\n      styles,\r\n      configs,\r\n      size: [width, height],\r\n      remoteLegends,\r\n      maxColumnWidth,\r\n      maxColumnHeight,\r\n    } = this.config;\r\n    const legends: LegendConfiguration[] = [];\r\n    if (styles) {\r\n      styles.forEach(style => legends.push(this.extractConfigFromStyle(style)));\r\n    }\r\n    if (configs) {\r\n      legends.unshift.apply(legends, configs);\r\n    }\r\n    const outputClass = format === 'svg' ? SvgOutput : PngOutput;\r\n    const output = new outputClass([width, height], maxColumnWidth || 0, maxColumnHeight || 0, target);\r\n    const position: [number, number] = [0, 0];\r\n    for (let i = 0; i < legends.length; i++) {\r\n      await this.renderLegend(legends[i], output, position);\r\n    }\r\n    if (remoteLegends) {\r\n      await this.renderImages(remoteLegends, output, position);\r\n    }\r\n    return output.generate(position[1]);\r\n  }\r\n\r\n  /**\r\n   * Renders the configured legend as an SVG or PNG image in the given target container. All pre-existing legends\r\n   * will be removed.\r\n   * @param {HTMLElement} target a node to append the svg to\r\n   * @param format\r\n   * @return {SVGSVGElement} The final SVG legend\r\n   */\r\n  async render(target: HTMLElement, format: 'svg' | 'png' = 'svg') {\r\n    await this.renderAsImage(format, target);\r\n  }\r\n}\r\nexport default LegendRenderer;\r\n"]}