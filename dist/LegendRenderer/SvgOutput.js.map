{"version":3,"file":"SvgOutput.js","sourceRoot":"","sources":["../../src/LegendRenderer/SvgOutput.ts"],"names":[],"mappings":"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","sourcesContent":["import {BaseType, select, Selection} from 'd3-selection';\r\nimport AbstractOutput from './AbstractOutput';\r\n\r\nconst ROOT_CLASS = 'geostyler-legend-renderer';\r\n\r\nexport default class SvgOutput extends AbstractOutput {\r\n  root: Selection<SVGSVGElement, unknown, null, undefined> | null | undefined = null;\r\n  currentContainer: Selection<SVGGElement, unknown, null, undefined> | null | undefined = null;\r\n\r\n  constructor(\r\n    size: [number, number],\r\n    maxColumnWidth: number | undefined,\r\n    maxColumnHeight: number | undefined,\r\n    target?: HTMLElement,\r\n  ) {\r\n    super(size, maxColumnWidth || 0, maxColumnHeight || 0);\r\n\r\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg') as SVGSVGElement;\r\n\r\n    this.root = select(svg)\r\n      .attr('class', ROOT_CLASS)\r\n      .attr('viewBox', `0 0 ${size[0]} ${size[1]}`)\r\n      .attr('top', 0)\r\n      .attr('left', 0)\r\n      .attr('width', size[0])\r\n      .attr('height', size[1]);\r\n    this.currentContainer = this.root;\r\n\r\n    if (target) {\r\n      select(target).select(`.${ROOT_CLASS}`).remove();\r\n      target.append(this.root.node() as Node);\r\n    }\r\n  }\r\n\r\n  useContainer(title: string) {\r\n    this.currentContainer = this.root?.append('g')\r\n      .attr('class', 'legend-item')\r\n      .attr('title', title);\r\n  };\r\n\r\n  useRoot() {\r\n    this.currentContainer = this.root;\r\n  }\r\n\r\n  addTitle(text: string, x: number | string, y: number | string) {\r\n    this.currentContainer?.append('g').append('text')\r\n      .text(text)\r\n      .attr('class', 'legend-title')\r\n      .attr('text-anchor', 'start')\r\n      .attr('dx', x)\r\n      .attr('dy', y);\r\n  };\r\n\r\n  addLabel(text: string, x: number | string, y: number | string) {\r\n    this.currentContainer?.append('text')\r\n      .text(text)\r\n      .attr('x', x)\r\n      .attr('y', y);\r\n  };\r\n\r\n  addImage(\r\n    dataUrl: string,\r\n    imgWidth: number,\r\n    imgHeight: number,\r\n    x: number|string,\r\n    y: number|string,\r\n    drawRect: boolean,\r\n  ) {\r\n    if (drawRect) {\r\n      this.currentContainer?.append('rect')\r\n        .attr('x', x)\r\n        .attr('y', y)\r\n        .attr('width', imgWidth)\r\n        .attr('height', imgHeight)\r\n        .style('fill-opacity', 0)\r\n        .style('stroke', 'black');\r\n    }\r\n    this.currentContainer?.append('svg:image')\r\n      .attr('x', x)\r\n      .attr('y', y)\r\n      .attr('width', imgWidth)\r\n      .attr('height', imgHeight)\r\n      .attr('href', dataUrl);\r\n    this.root?.attr('xmlns', 'http://www.w3.org/2000/svg');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  generate(finalHeight: number) {\r\n    const nodes = this.root?.selectAll('g.legend-item');\r\n    this.shortenLabels(nodes, this.maxColumnWidth || 0);\r\n    if (!this.maxColumnHeight) {\r\n      this.root\r\n        ?.attr('viewBox', `0 0 ${this.size[0]} ${finalHeight}`)\r\n        .attr('height', finalHeight);\r\n    }\r\n    return this.root?.node() as SVGElement;\r\n  }\r\n\r\n  /**\r\n   * Shortens the labels if they overflow.\r\n   * @param {Selection} nodes the legend item group nodes\r\n   * @param {number} maxWidth the maximum column width\r\n   */\r\n  private shortenLabels(nodes: Selection<BaseType, unknown, SVGElement, {}> | undefined, maxWidth: number) {\r\n    nodes?.each(function() {\r\n      const node = select(this);\r\n      const text = node.select('text');\r\n      if (!(node.node() instanceof SVGElement) || !text.size()) {\r\n        return;\r\n      }\r\n      const elem: Element = <Element> (text.node());\r\n      let width = elem.getBoundingClientRect().width;\r\n      let adapted = false;\r\n      while (width > maxWidth) {\r\n        let str = text.text();\r\n        str = str.substring(0, str.length - 1);\r\n        text.text(str);\r\n        width = elem.getBoundingClientRect().width;\r\n        adapted = true;\r\n      }\r\n      if (adapted) {\r\n        let str = text.text();\r\n        str = str.substring(0, str.length - 3);\r\n        text.text(str + '...');\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}